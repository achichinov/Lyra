# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright Ren√© Ferdinand Rivera Morell.
# Copyright 2020 Jayesh Vinay Badwaik

trigger:
  branches:
    include:
    - develop
    - release
    - feature/*
    - pr/*
    - issue/*
  paths:
    exclude:
    - .circleci/*
    - .drone.star
    - .github/workflows/*
    - .semaphore/*
    - .travis.yml
    - appveyor.yml
pr:
  branches:
    include:
    - develop
schedules:
  - cron: '0 1 * * 0'
    displayName: 'Weekly'
    branches:
      include:
        - develop

resources:
  containers:
    - { container: linux_gcc15, image: 'teeks99/gcc-ubuntu:15', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_gcc14, image: 'teeks99/gcc-ubuntu:14', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_gcc13, image: 'teeks99/gcc-ubuntu:13', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_gcc12, image: 'teeks99/gcc-ubuntu:12', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_gcc11, image: 'teeks99/gcc-ubuntu:11', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_gcc10, image: 'teeks99/gcc-ubuntu:10', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_gcc9, image: 'teeks99/gcc-ubuntu:9', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_gcc8, image: 'teeks99/gcc-ubuntu:8', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_gcc7, image: 'teeks99/gcc-ubuntu:7', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_gcc6, image: 'teeks99/gcc-ubuntu:6', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_gcc5, image: 'teeks99/gcc-ubuntu:5', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang20, image: 'teeks99/clang-ubuntu:20', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang19, image: 'teeks99/clang-ubuntu:19', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang18, image: 'teeks99/clang-ubuntu:18', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang17, image: 'teeks99/clang-ubuntu:17', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang16, image: 'teeks99/clang-ubuntu:16', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang15, image: 'teeks99/clang-ubuntu:15', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang14, image: 'teeks99/clang-ubuntu:14', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang13, image: 'teeks99/clang-ubuntu:13', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang12, image: 'teeks99/clang-ubuntu:12', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang11, image: 'teeks99/clang-ubuntu:11', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang10, image: 'teeks99/clang-ubuntu:10', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang9, image: 'teeks99/clang-ubuntu:9', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang8, image: 'teeks99/clang-ubuntu:8', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang7, image: 'teeks99/clang-ubuntu:7', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang6, image: 'teeks99/clang-ubuntu:6', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang5, image: 'teeks99/clang-ubuntu:5', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang4, image: 'teeks99/clang-ubuntu:4', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }
    - { container: linux_clang3, image: 'teeks99/clang-ubuntu:3.9', options: '--name container -v /usr/bin/docker:/tmp/docker:ro' }

stages:

- stage: No_Warn
  dependsOn: []
  jobs:

  - job: 'Linux'
    strategy:
      matrix:
        GCC 14 Warn-All: {
          CXX: g++-14, CONTAINER: linux_gcc14,
          TOOLSET: gcc, CXXSTD: "11,14,17,20,23",
          B2_ARGS: 'warnings=extra warnings-as-errors=on cxxflags=-Woverloaded-virtual cxxflags=-Wshadow' }
        Clang 19 Warn-All: {
          CXX: clang++-19, CONTAINER: linux_clang19,
          TOOLSET: clang, CXXSTD: "11,14,17,20,23",
          B2_ARGS: "warnings=extra warnings-as-errors=on" }
    pool: { vmImage: 'ubuntu-latest' }
    container: $[ variables['CONTAINER'] ]
    steps:
    - template: .ci/azp-linux-docker-test.yml

  - job: 'Xcode'
    strategy:
      matrix:
        Xcode 15.2 Warn-All: {
          CXX: clang++, VM_IMAGE: 'macOS-13', XCODE_VERSION: "15.2",
          TOOLSET: clang, CXXSTD: "11,14,17,20", B2_ARGS: "warnings=extra warnings-as-errors=on" }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - template: .ci/azp-xcode-test.yml

  - job: 'Visual_Studio'
    strategy:
      matrix:
        VS 2022 Warn-All: {
          VSWHERE_VERSION: '[17.0,18.0)', CXX: cl.exe, B2_ARGS: "warnings=extra warnings-as-errors=on",
          PLATFORM: x64, VM_IMAGE: 'windows-2022', TOOLSET: msvc, TOOLSET_VERSION: '14.3' }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - template: .ci/azp-msvc-test.yml

- stage: Sanitize
  dependsOn: []
  jobs:

  - job: 'Linux'
    strategy:
      matrix:
        Address: {
          CXX: g++-14, CONTAINER: linux_gcc14,
          TOOLSET: gcc, CXXSTD: "11,14,17,20,23",
          B2_ARGS: 'address-sanitizer=on' }
        Undefined: {
          CXX: g++-14, CONTAINER: linux_gcc14,
          TOOLSET: gcc, CXXSTD: "11,14,17,20,23",
          B2_ARGS: 'undefined-sanitizer=on' }
    pool: { vmImage: 'ubuntu-latest' }
    container: $[ variables['CONTAINER'] ]
    steps:
    - template: .ci/azp-linux-docker-test.yml

- stage: Test
  dependsOn: [No_Warn, Sanitize]
  jobs:

  - job: 'Linux'
    strategy:
      matrix:
        GCC 14: { CXX: g++-14, CONTAINER: linux_gcc14, TOOLSET: gcc, CXXSTD: "11,14,17,20,23" }
        GCC 13: { CXX: g++-13, CONTAINER: linux_gcc13, TOOLSET: gcc, CXXSTD: "11,14,17,20" }
        GCC 12: { CXX: g++-12, CONTAINER: linux_gcc12, TOOLSET: gcc, CXXSTD: "11,14,17,20" }
        GCC 11: { CXX: g++-11, CONTAINER: linux_gcc11, TOOLSET: gcc, CXXSTD: "11,14,17,20" }
        GCC 10: { CXX: g++-10, CONTAINER: linux_gcc10, TOOLSET: gcc, CXXSTD: "11,14,17,2a" }
        GCC 9: { CXX: g++-9, CONTAINER: linux_gcc9, TOOLSET: gcc, CXXSTD: "11,14,17,2a" }
        GCC 8: { CXX: g++-8, CONTAINER: linux_gcc8, TOOLSET: gcc, CXXSTD: "11,14,17,2a" }
        GCC 7: { CXX: g++-7, CONTAINER: linux_gcc7, TOOLSET: gcc, CXXSTD: "11,14,17" }
        GCC 6: { CXX: g++-6, CONTAINER: linux_gcc6, TOOLSET: gcc, CXXSTD: "11,14,17" }
        GCC 5: { CXX: g++-5, CONTAINER: linux_gcc5, TOOLSET: gcc, CXXSTD: "11,14" }
        Clang 19: { CXX: clang++-19, CONTAINER: linux_clang19, TOOLSET: clang, CXXSTD: "11,14,17,20,23" }
        Clang 18: { CXX: clang++-18, CONTAINER: linux_clang18, TOOLSET: clang, CXXSTD: "11,14,17,20,23" }
        Clang 17: { CXX: clang++-17, CONTAINER: linux_clang17, TOOLSET: clang, CXXSTD: "11,14,17,20" }
        Clang 16: { CXX: clang++-16, CONTAINER: linux_clang16, TOOLSET: clang, CXXSTD: "11,14,17,20" }
        Clang 15: { CXX: clang++-15, CONTAINER: linux_clang15, TOOLSET: clang, CXXSTD: "11,14,17,20" }
        Clang 14: { CXX: clang++-14, CONTAINER: linux_clang14, TOOLSET: clang, CXXSTD: "11,14,17,20" }
        Clang 13: { CXX: clang++-13, CONTAINER: linux_clang13, TOOLSET: clang, CXXSTD: "11,14,17,20" }
        Clang 12: { CXX: clang++-12, CONTAINER: linux_clang12, TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Clang 11: { CXX: clang++-11, CONTAINER: linux_clang11, TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Clang 10: { CXX: clang++-10, CONTAINER: linux_clang10, TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Clang 9: { CXX: clang++-9, CONTAINER: linux_clang9, TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Clang 8: { CXX: clang++-8, CONTAINER: linux_clang8, TOOLSET: clang, CXXSTD: "11,14,17" }
        Clang 7: { CXX: clang++-7, CONTAINER: linux_clang7, TOOLSET: clang, CXXSTD: "11,14,17" }
        Clang 6.0: { CXX: clang++-6.0, CONTAINER: linux_clang6, TOOLSET: clang, CXXSTD: "11,14,17" }
        Clang 5.0: { CXX: clang++-5.0, CONTAINER: linux_clang5, TOOLSET: clang, CXXSTD: "11,14,17" }
        Clang 4.0: { CXX: clang++-4.0, CONTAINER: linux_clang4, TOOLSET: clang, CXXSTD: "11,14" }
        Clang 3.9: { CXX: clang++-3.9, CONTAINER: linux_clang3, TOOLSET: clang, CXXSTD: "11" }
    pool: { vmImage: 'ubuntu-20.04' }
    container: $[ variables['CONTAINER'] ]
    steps:
    - template: .ci/azp-linux-docker-test.yml

  - job: 'Xcode'
    strategy:
      matrix:
        Xcode 15.2: {
          CXX: clang++, VM_IMAGE: 'macOS-13', XCODE_VERSION: "15.2",
          TOOLSET: clang, CXXSTD: "11,14,17,20" }
        Xcode 14.3.1: {
          CXX: clang++, VM_IMAGE: 'macOS-13', XCODE_VERSION: "14.3.1",
          TOOLSET: clang, CXXSTD: "11,14,17,20" }
        Xcode 13.4.1: {
          CXX: clang++, VM_IMAGE: 'macOS-12', XCODE_VERSION: "13.4.1",
          TOOLSET: clang, CXXSTD: "11,14,17,20" }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - template: .ci/azp-xcode-test.yml

  - job: 'Visual_Studio'
    strategy:
      matrix:
        VS 2022: {
          VSWHERE_VERSION: '[17.0,18.0)', CXX: cl.exe,
          PLATFORM: x64, VM_IMAGE: 'windows-2022', TOOLSET: msvc, TOOLSET_VERSION: '14.3' }
        VS 2019: {
          VSWHERE_VERSION: '[16.0,17.0)', CXX: cl.exe,
          PLATFORM: x64, VM_IMAGE: 'windows-2019', TOOLSET: msvc, TOOLSET_VERSION: '14.2' }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - template: .ci/azp-msvc-test.yml

  - job: 'MinGW'
    strategy:
      matrix:
        MinGW 14.2.0: { MINGW_VERSION: '14.2.0', MINGW_RT: 'rt_v12-rev0', CXXSTD: "11,14,17,20,23" }
        MinGW 13.2.0: { MINGW_VERSION: '13.2.0', MINGW_RT: 'rt_v11-rev1', CXXSTD: "11,14,17,20" }
        MinGW 12.2.0: { MINGW_VERSION: '12.2.0', MINGW_RT: 'rt_v10-rev2', CXXSTD: "11,14,17,20" }
    pool:
      vmImage: 'windows-latest'
    steps:
    - template: .ci/azp-mingw-test.yml
